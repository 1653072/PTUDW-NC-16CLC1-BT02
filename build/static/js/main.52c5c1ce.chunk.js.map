{"version":3,"sources":["gameUtil.js","game.js","index.js"],"names":["initGameBoard","width","height","gameBoard","i","gameRow","j","push","pattern","active","directionResult","x","y","dx","dy","countL","countR","blockL","blockR","x1","y1","undefined","drawWinCells","calculateResult","emptyCellNum","result","newX","newY","horizontalResult","verticallResult","majorDiagonalResult","minorDiagonalResult","calculate","Game","props","copyTwoDimensionArray","twoDimensionArray","map","element","newElement","value","renderForm","onSubmit","handleGameBoardGeneration","Row","className","type","onChange","handleInputtedSize","state","inputtedSize","min","max","required","renderSquare","onClick","handleClick","renderBoard","val","boxes","res","key","renderHistoryMove","hgbArray","activeStep","currentActiveHistoryStep","ascHistory","ascHistoryGameBoard","historyGameBoard","slice","reverse","index","currentXTurn","xIsNext","length","Button","handleJumpToOldGameBoard","colNo","rowNo","historyData","size","boardSize","bind","handleSortHistory","event","this","setState","target","newSize","data","preventDefault","newHistoryGameBoard","importantData","endGame","oldGameBoard","newGameBoard","newEmptyCellNum","msg","isEnd","concat","sortBtnName","Container","fluid","gameMessage","Col","React","Component","ReactDOM","render","document","getElementById"],"mappings":"wSAAO,SAASA,EAAcC,EAAOC,GAGnC,IAFA,IAAIC,EAAY,GAEPC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAG/B,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAK9BD,EAAQE,KAJO,CACbC,QAAS,GACTC,QAAQ,IAKZN,EAAUI,KAAKF,GAGjB,OAAOF,EAGT,SAASO,EAAgBP,EAAWQ,EAAGC,EAAGC,EAAIC,EAAIN,GAIhD,IAHA,IAAIO,EAAS,EAAGC,EAAS,EACrBC,GAAS,EAAOC,GAAS,EAEpBd,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIe,EAAKR,EAAIP,EAAIS,EACbO,EAAKR,EAAIR,EAAIU,EAEjB,QAAqBO,GAAjBlB,EAAUiB,SAAyCC,GAArBlB,EAAUiB,GAAID,GAAkB,CAChED,GAAS,EACT,MAGA,GAAIf,EAAUiB,GAAID,GAAIX,UAAYA,EAIhC,IAAiC,IAA7BL,EAAUiB,GAAID,GAAIX,QAAe,CACnCU,GAAS,EACT,MAEG,MAPLF,GAAU,EAUhB,IAAK,IAAIZ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIe,EAAKR,EAAIP,EAAIS,EACbO,EAAKR,EAAIR,EAAIU,EAEjB,QAAqBO,GAAjBlB,EAAUiB,SAAyCC,GAArBlB,EAAUiB,GAAID,GAAkB,CAChEF,GAAS,EACT,MAGA,GAAId,EAAUiB,GAAID,GAAIX,UAAYA,EAIhC,IAAiC,IAA7BL,EAAUiB,GAAID,GAAIX,QAAe,CACnCS,GAAS,EACT,MAEG,MAPLF,GAAU,EAUhB,OAAIA,EAASC,EAAS,GAAK,KAAOC,IAAWC,KA8CxC,SAAsBf,EAAWQ,EAAGC,EAAGG,EAAQC,EAAQH,EAAIC,GAC5DC,EAASC,GAAU,IACrBD,EAAS,EAAIC,GAIf,GAAIH,EAAK,GAAW,GAANC,EAAS,CACrB,IAAK,IAAIV,EAAEW,EAAQX,GAAG,IAAKA,EACzBD,EAAUS,GAAGD,GAAU,EAALP,GAASK,QAAS,EAGtC,IAAK,IAAIL,EAAEY,EAAQZ,GAAG,IAAKA,EACzBD,EAAUS,GAAGD,EAAS,EAAJP,GAAQK,QAAS,EAGrC,OAIF,GAAU,GAANI,GAAWC,EAAK,EAAG,CACrB,IAAK,IAAIV,EAAEW,EAAQX,GAAG,IAAKA,EACzBD,EAAUS,GAAU,EAALR,GAASO,GAAGF,QAAS,EAGtC,IAAK,IAAIL,EAAEY,EAAQZ,GAAG,IAAKA,EACzBD,EAAUS,EAAS,EAAJR,GAAQO,GAAGF,QAAS,EAGrC,OAIF,GAAII,EAAK,GAAKC,EAAK,EAAG,CACpB,IAAK,IAAIV,EAAEW,EAAQX,GAAG,IAAKA,EACzBD,EAAUS,GAAU,EAALR,GAASO,GAAU,EAALP,GAASK,QAAS,EAGjD,IAAK,IAAIL,EAAEY,EAAQZ,GAAG,IAAKA,EACzBD,EAAUS,EAAS,EAAJR,GAAQO,EAAS,EAAJP,GAAQK,QAAS,EAG/C,OAIF,GAAII,EAAK,GAAKC,EAAK,EAAG,CACpB,IAAK,IAAIV,EAAE,EAAGA,GAAGW,IAAUX,EACzBD,EAAUS,EAAS,EAAJR,GAAQO,GAAU,EAALP,GAASK,QAAS,EAGhD,IAAK,IAAIL,EAAE,EAAGA,GAAGY,IAAUZ,EACzBD,EAAUS,GAAU,EAALR,GAASO,EAAS,EAAJP,GAAQK,QAAS,GAhGhDa,CAAanB,EAAWQ,EAAGC,EAAGG,EAAQC,EAAQH,EAAIC,IAC3C,GAqCJ,SAASS,EAAgBpB,EAAWQ,EAAGC,EAAGJ,EAASgB,GACxD,IAAIC,EAhCN,SAAmBtB,EAAWuB,EAAMC,EAAMnB,GACxC,IAAIoB,EAAmBlB,EAAgBP,EAAWuB,EAAMC,EAAM,EAAG,EAAGnB,GAEhEqB,EAAkBnB,EAAgBP,EAAWuB,EAAMC,EAAM,EAAG,EAAGnB,GAE/DsB,EAAsBpB,EACxBP,EACAuB,EACAC,EACA,EACA,EACAnB,GAGEuB,EAAsBrB,EACxBP,EACAuB,EACAC,EACA,GACC,EACDnB,GAGF,OAAOoB,GACLC,GACAC,GACAC,EACE,MACA,GAISC,CAAU7B,EAAWQ,EAAGC,EAAGJ,GACxC,MAAc,IAAViB,EAAqBA,EACrBD,EAAe,IAAM,EAAU,OAC3BC,E,IC6JKQ,E,kDA5PX,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IAwDVC,sBAAwB,SAACC,GACrB,IAAIX,EAAS,GAQb,OAPAW,EAAkBC,KAAI,SAACC,GACnB,IAAIC,EAAa,GACjBD,EAAQD,KAAI,SAACG,GACTD,EAAWhC,KAAX,eAAoBiC,OAExBf,EAAOlB,KAAKgC,MAETd,GAlEQ,EAyInBgB,WAAa,WACT,OACI,0BAAMC,SAAU,EAAKC,2BACjB,kBAACC,EAAA,EAAD,KACI,6BACI,2BAAOC,UAAU,gBAAjB,QACA,2BACIC,KAAK,SACLD,UAAU,eACVE,SAAU,EAAKC,mBACfR,MAAO,EAAKS,MAAMC,aAClBC,IAAI,IACJC,IAAI,KACJC,UAAQ,KAEhB,6BACI,2BAAOP,KAAK,SAASN,MAAM,WAAWK,UAAU,mBAzJjD,EAgKnBS,aAAe,SAACnD,EAAWQ,EAAGC,GAC1B,OACI,4BAAQiC,UAAW1C,EAAUQ,GAAGC,GAAGH,OAAS,aAAe,SAAU8C,QAAS,kBAAM,EAAKC,YAAY7C,EAAGC,KACnGT,EAAUQ,GAAGC,GAAGJ,UAnKV,EAwKnBiD,YAAc,SAACtD,GACX,OACI,oCAEIA,EAAUkC,KAAI,SAACqB,EAAK/C,GAChB,IAAIgD,EAAQxD,EAAUkC,KAAI,SAACuB,EAAKhD,GAC5B,OACI,yBAAKiD,IAAK,KAAOlD,EAAE,IAAIC,EAAE,IACpB,EAAK0C,aAAanD,EAAWQ,EAAGC,OAK7C,OACI,yBAAKiC,UAAU,YAAYgB,IAAK,KAAOlD,EAAE,IACpCgD,QAvLN,EAgMnBG,kBAAoB,WAChB,IAAIC,EAAW,KACXC,EAAa,EAAKf,MAAMgB,yBACxBC,EAAa,EAAKjB,MAAMkB,oBAQ5B,OALIJ,EADAG,EACW,EAAKjB,MAAMmB,iBAEX,EAAKnB,MAAMmB,iBAAiBC,MAAM,GAAGC,UAIhD,yBAAKzB,UAAU,cAEXkB,EAAS1B,KAAI,SAACG,EAAO+B,GACjB,IAAIC,GAAehC,EAAMiC,QAMzB,OAJKP,IACDK,EAAQR,EAASW,OAAS,EAAIH,GAGrB,GAATA,EACQ,kBAACI,EAAA,EAAD,CAAQd,IAAI,QAAQhB,UAAY0B,GAASP,EAAc,8BAAgC,aAAcT,QAAS,kBAAM,EAAKqB,yBAAyBL,KAAlJ,gBAEA,kBAACI,EAAA,EAAD,CAAQd,IAAKU,EAAO1B,UAAY0B,GAASP,EAAc,8BAAgC,aAAcT,QAAS,kBAAM,EAAKqB,yBAAyBL,KAAlJ,SAAkKA,EAAlK,YAAkLC,EAAe,IAAM,IAAvM,WAAoNhC,EAAMqC,MAA1N,WAAyOrC,EAAMsC,YAtNvQ,IAEIC,EAAc,CAAC,CACf,aAFO/E,EADA,OAIP,MAAS,EACT,MAAS,EACT,aAAiBgF,IACjB,SAAW,EACX,YAAe,iBACf,SAAW,IAXA,OAcf,EAAK/B,MAAQ,CACTC,aAbO,GAcP+B,UAdO,GAePb,iBAAkBW,EAClBd,yBAA0B,EAC1BE,qBAAqB,GAGzB,EAAKnB,mBAAqB,EAAKA,mBAAmBkC,KAAxB,gBAC1B,EAAKvC,0BAA4B,EAAKA,0BAA0BuC,KAA/B,gBACjC,EAAK1B,YAAc,EAAKA,YAAY0B,KAAjB,gBACnB,EAAKN,yBAA2B,EAAKA,yBAAyBM,KAA9B,gBAChC,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBA1BV,E,+DAgCAE,GACfC,KAAKC,SAAS,CAACpC,aAAckC,EAAMG,OAAO/C,U,gDAGpB4C,GACtB,IAAII,EAAUH,KAAKpC,MAAMC,aACrBuC,EAAOzF,EAAcwF,EAASA,GAElCH,KAAKC,SAAS,CACVL,UAAWO,EACXpB,iBAAkB,CAAC,CACf,aAAgBqB,EAChB,MAAS,EACT,MAAS,EACT,aAAiBD,EAAUA,EAC3B,SAAW,EACX,YAAe,iBACf,SAAW,IAEfvB,yBAA0B,EAC1BE,qBAAqB,IAEzBiB,EAAMM,mB,kCAeE/E,EAAGC,GACX,IAAI+E,EAAsBN,KAAKpC,MAAMmB,iBAAiBC,MAAM,EAAGgB,KAAKpC,MAAMgB,yBAA2B,GACjG2B,EAAgBD,EAAoBA,EAAoBjB,OAAS,GAGrE,IAAIkB,EAAcC,QAAlB,CAKA,IAAIrF,EAAUoF,EAAcnB,QAAU,IAAM,IAC5C,GAAiD,KAA7CmB,EAAcE,aAAanF,GAAGC,GAAGJ,QAArC,CACA,IAAIuF,EAAeV,KAAKlD,sBAAsByD,EAAcE,cAC5DC,EAAapF,GAAGC,GAAGJ,QAAUA,EAG7B,IAAIiB,EAASF,EAAgBwE,EAAcnF,EAAGD,EAAGH,EAASoF,EAAcpE,cAGpEwE,EAAkBJ,EAAcpE,aAAe,EAG/CyE,EAAM,iBAAoBL,EAAcnB,QAAgB,IAAN,KACvC,QAAXhD,EACAwE,EAAM,gBAAkBzF,EAAU,iBAGpB,QAAViB,IACAwE,EAAM,sCAId,IAAIC,GAAQ,EACG,QAAXzE,GAA+B,SAAXA,GAAwC,GAAnBuE,IACzCE,GAAQ,GAIZb,KAAKC,SAAS,CACVlB,iBAAkBuB,EAAoBQ,OAAO,CAAC,CAC1C,aAAgBJ,EAChB,MAASnF,EAAI,EACb,MAASD,EAAI,EACb,aAAgBqF,EAChB,SAAYJ,EAAcnB,QAC1B,YAAewB,EACf,QAAWC,KAEfjC,yBAA0B0B,EAAoBjB,a,+CAI7BH,GACjBA,GAASc,KAAKpC,MAAMgB,0BACxBoB,KAAKC,SAAS,CACVrB,yBAA0BM,M,0CAK9Bc,KAAKC,SAAS,CACVnB,qBAAsBkB,KAAKpC,MAAMkB,wB,+BA8F/B,IAAD,OACDiC,EAAcf,KAAKpC,MAAMkB,oBAAsB,kBAAoB,iBACnEyB,EAAgBP,KAAKpC,MAAMmB,iBAAiBiB,KAAKpC,MAAMgB,0BACvD9D,EAAYkF,KAAKlD,sBAAsByD,EAAcE,cAEzD,OACI,kBAACO,EAAA,EAAD,CAAWC,MAAM,QACZjB,KAAK5C,aACN,yBAAKI,UAAU,WACX,yBAAKA,UAAU,UACV+C,EAAcW,aAEnB,kBAAC3D,EAAA,EAAD,KACI,kBAAC4D,EAAA,EAAD,KAAMnB,KAAK5B,YAAYtD,IACvB,kBAACqG,EAAA,EAAD,KACI,kBAAC7B,EAAA,EAAD,CAAQ9B,UAAU,yBAAyBU,QAAS,kBAAM,EAAK4B,sBAAsBiB,GACpFf,KAAKvB,4B,GApPf2C,IAAMC,WCJzBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.52c5c1ce.chunk.js","sourcesContent":["export function initGameBoard(width, height) {\r\n  let gameBoard = []\r\n\r\n  for (let i = 0; i < height; i++) {\r\n    let gameRow = [];\r\n\r\n    for (let j = 0; j < width; j++) {\r\n      let gameCell = {\r\n        pattern: \"\",\r\n        active: false,\r\n      };\r\n      gameRow.push(gameCell);\r\n    }\r\n    \r\n    gameBoard.push(gameRow);\r\n  }\r\n\r\n  return gameBoard;\r\n}\r\n\r\nfunction directionResult(gameBoard, x, y, dx, dy, pattern) {\r\n  let countL = 0, countR = 0;\r\n  let blockL = false, blockR = false;\r\n\r\n  for (let i = 1; i < 5; i++) {\r\n    let x1 = x + i * dx;\r\n    let y1 = y + i * dy;\r\n\r\n    if (gameBoard[y1] == undefined || gameBoard[y1][x1] == undefined) {\r\n      blockR = true;\r\n      break;\r\n    } \r\n    else \r\n      if (gameBoard[y1][x1].pattern === pattern) {\r\n        countR += 1;\r\n      } \r\n      else \r\n        if (gameBoard[y1][x1].pattern != \"\") {\r\n          blockR = true;\r\n          break;\r\n        } \r\n        else break;\r\n  }\r\n\r\n  for (let i = 1; i < 5; i++) {\r\n    let x1 = x - i * dx;\r\n    let y1 = y - i * dy;\r\n\r\n    if (gameBoard[y1] == undefined || gameBoard[y1][x1] == undefined) {\r\n      blockL = true;\r\n      break;\r\n    } \r\n    else \r\n      if (gameBoard[y1][x1].pattern === pattern) {\r\n        countL += 1;\r\n      } \r\n      else \r\n        if (gameBoard[y1][x1].pattern != \"\") {\r\n          blockL = true;\r\n          break;\r\n        } \r\n        else break;\r\n  }\r\n\r\n  if (countL + countR + 1 >= 5 && (!blockL || !blockR)) {\r\n    drawWinCells(gameBoard, x, y, countL, countR, dx, dy)\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction calculate(gameBoard, newX, newY, pattern) {\r\n  let horizontalResult = directionResult(gameBoard, newX, newY, 1, 0, pattern);\r\n\r\n  let verticallResult = directionResult(gameBoard, newX, newY, 0, 1, pattern);\r\n\r\n  let majorDiagonalResult = directionResult(\r\n    gameBoard,\r\n    newX,\r\n    newY,\r\n    1,\r\n    1,\r\n    pattern\r\n  );\r\n\r\n  let minorDiagonalResult = directionResult(\r\n    gameBoard,\r\n    newX,\r\n    newY,\r\n    1,\r\n    -1,\r\n    pattern\r\n  );\r\n\r\n  return horizontalResult ||\r\n    verticallResult ||\r\n    majorDiagonalResult ||\r\n    minorDiagonalResult\r\n    ? \"win\"\r\n    : \"\";\r\n}\r\n\r\nexport function calculateResult(gameBoard, x, y, pattern, emptyCellNum) {\r\n  let result = calculate(gameBoard, x, y, pattern)\r\n  if (result != \"\") return result\r\n  if (emptyCellNum - 1 === 0) return \"draw\"\r\n  return  result\r\n}\r\n\r\nexport function drawWinCells(gameBoard, x, y, countL, countR, dx, dy) {\r\n  if (countL + countR >= 5) {\r\n    countL = 4 - countR\r\n  }\r\n\r\n  // Horizontal\r\n  if (dx > 0 && dy == 0) {\r\n    for (let i=countL; i>=0; --i) {\r\n      gameBoard[y][x + (i * -1)].active = true\r\n    }\r\n\r\n    for (let i=countR; i>=0; --i) {\r\n      gameBoard[y][x + (i * 1)].active = true\r\n    }\r\n\r\n    return\r\n  }\r\n\r\n  // Vertical\r\n  if (dx == 0 && dy > 0) {\r\n    for (let i=countL; i>=0; --i) {\r\n      gameBoard[y + (i * -1)][x].active = true\r\n    }\r\n\r\n    for (let i=countR; i>=0; --i) {\r\n      gameBoard[y + (i * 1)][x].active = true\r\n    }\r\n\r\n    return\r\n  }\r\n\r\n  // Major diagonal\r\n  if (dx > 0 && dy > 0) {\r\n    for (let i=countL; i>=0; --i) {\r\n      gameBoard[y + (i * -1)][x + (i * -1)].active = true\r\n    }\r\n\r\n    for (let i=countR; i>=0; --i) {\r\n      gameBoard[y + (i * 1)][x + (i * 1)].active = true\r\n    }\r\n\r\n    return\r\n  }\r\n\r\n  // Minor diagonal\r\n  if (dx > 0 && dy < 0) {\r\n    for (let i=0; i<=countL; ++i) {\r\n      gameBoard[y + (i * 1)][x + (i * -1)].active = true\r\n    }\r\n\r\n    for (let i=0; i<=countR; ++i) {\r\n      gameBoard[y + (i * -1)][x + (i * 1)].active = true\r\n    }\r\n\r\n    return\r\n  }\r\n}\r\n","import React from 'react';\nimport './game.css';\nimport {Container, Row, Col, Button} from 'react-bootstrap';\nimport {initGameBoard, calculateResult} from './gameUtil'\n\n// ------------------------------------------------------\n// Class Game\n// ------------------------------------------------------\nclass Game extends React.Component {\n    // ----------------\n    // Constructor\n    // ----------------\n    constructor(props) {\n        super(props);\n        let size = 10\n        let data = initGameBoard(size, size)\n        let historyData = [{\n            \"oldGameBoard\": data,\n            \"colNo\": 0,\n            \"rowNo\": 0,\n            \"emptyCellNum\": (size * size),\n            \"xIsNext\": true,\n            \"gameMessage\": \"Next player: X\",\n            \"endGame\": false,\n        }]\n\n        this.state = {\n            inputtedSize: size,\n            boardSize: size,\n            historyGameBoard: historyData,\n            currentActiveHistoryStep: 0,\n            ascHistoryGameBoard: true,\n        };\n\n        this.handleInputtedSize = this.handleInputtedSize.bind(this);\n        this.handleGameBoardGeneration = this.handleGameBoardGeneration.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleJumpToOldGameBoard = this.handleJumpToOldGameBoard.bind(this);\n        this.handleSortHistory = this.handleSortHistory.bind(this);\n    }\n\n    // ----------------\n    // Functions\n    // ----------------\n    handleInputtedSize(event) {\n        this.setState({inputtedSize: event.target.value});\n    }\n\n    handleGameBoardGeneration(event) {\n        let newSize = this.state.inputtedSize\n        let data = initGameBoard(newSize, newSize)\n\n        this.setState({\n            boardSize: newSize,\n            historyGameBoard: [{\n                \"oldGameBoard\": data,\n                \"colNo\": 0,\n                \"rowNo\": 0,\n                \"emptyCellNum\": (newSize * newSize),\n                \"xIsNext\": true,\n                \"gameMessage\": \"Next player: X\",\n                \"endGame\": false,\n            }],\n            currentActiveHistoryStep: 0,\n            ascHistoryGameBoard: true,\n        });\n        event.preventDefault();\n    }\n\n    copyTwoDimensionArray = (twoDimensionArray) => {\n        let result = []\n        twoDimensionArray.map((element) => {\n            let newElement = []\n            element.map((value) => {\n                newElement.push({...value})\n            })\n            result.push(newElement)\n        })\n        return result\n    }\n\n    handleClick(x, y) {\n        let newHistoryGameBoard = this.state.historyGameBoard.slice(0, this.state.currentActiveHistoryStep + 1)\n        let importantData = newHistoryGameBoard[newHistoryGameBoard.length - 1]\n\n        // Check game is ended or not\n        if (importantData.endGame) {\n            return\n        }\n\n        // Prepare new values\n        let pattern = importantData.xIsNext ? 'X' : 'O'\n        if (importantData.oldGameBoard[x][y].pattern !== \"\") return\n        let newGameBoard = this.copyTwoDimensionArray(importantData.oldGameBoard)\n        newGameBoard[x][y].pattern = pattern\n\n        // Calculate result\n        let result = calculateResult(newGameBoard, y, x, pattern, importantData.emptyCellNum)\n        \n        // Decrease emptyCellNum by 1\n        let newEmptyCellNum = importantData.emptyCellNum - 1\n\n        // Set game message\n        let msg = 'Next player: ' + (!importantData.xIsNext ? 'X' : 'O')\n        if (result === \"win\") {\n            msg = \"Game result: \" + pattern + \" wins the game\"\n        }\n        else \n            if (result == \"draw\") {\n                msg = \"Game result: X and O draw the game\"\n            }\n        \n        // Update game status if it is ended\n        let isEnd = false\n        if (result === \"win\" || result === \"draw\" || newEmptyCellNum == 0) {\n            isEnd = true\n        }\n\n        // Set state\n        this.setState({\n            historyGameBoard: newHistoryGameBoard.concat([{\n                \"oldGameBoard\": newGameBoard,\n                \"colNo\": y + 1,\n                \"rowNo\": x + 1,\n                \"emptyCellNum\": newEmptyCellNum,\n                \"xIsNext\": !importantData.xIsNext,\n                \"gameMessage\": msg,\n                \"endGame\": isEnd,\n            }]),\n            currentActiveHistoryStep: newHistoryGameBoard.length,\n        });\n    }\n\n    handleJumpToOldGameBoard(index) {\n        if (index == this.state.currentActiveHistoryStep) return \n        this.setState({\n            currentActiveHistoryStep: index,\n        })\n    }\n\n    handleSortHistory() {\n        this.setState({\n            ascHistoryGameBoard: !this.state.ascHistoryGameBoard,\n        })\n    }\n    \n    // ----------------\n    // Render\n    // ----------------\n    renderForm = () => {\n        return (\n            <form onSubmit={this.handleGameBoardGeneration}>\n                <Row>  \n                    <div>\n                        <label className=\"headingLabel\">Size</label>\n                        <input \n                            type=\"number\" \n                            className=\"headingInput\"\n                            onChange={this.handleInputtedSize}  \n                            value={this.state.inputtedSize} \n                            min=\"5\" \n                            max=\"32\" \n                            required/>\n                    </div>\n                    <div>\n                        <input type=\"submit\" value=\"GENERATE\" className=\"headingBtn\" />  \n                    </div>\n                </Row>\n            </form>\n        );\n    }\n\n    renderSquare = (gameBoard, x, y) => {\n        return (\n            <button className={gameBoard[x][y].active ? \"square sbg\" : \"square\"} onClick={() => this.handleClick(x, y)}>\n                {gameBoard[x][y].pattern}\n            </button>\n        );\n    }\n\n    renderBoard = (gameBoard) => {\n        return (\n            <>\n            {   \n                gameBoard.map((val, x) => {\n                    let boxes = gameBoard.map((res, y) => {\n                        return (\n                            <div key={\"C\" + (x+1)*(y+1)}>\n                                {this.renderSquare(gameBoard, x, y)}\n                            </div>\n                        )\n                    })\n\n                    return (\n                        <div className=\"board-row\" key={\"R\" + (x+1)}>\n                            {boxes}\n                        </div>\n                    )\n                })\n            }\n            </>\n        );\n    }\n\n    renderHistoryMove = () => {\n        let hgbArray = null\n        let activeStep = this.state.currentActiveHistoryStep\n        let ascHistory = this.state.ascHistoryGameBoard\n\n        if (ascHistory) {\n            hgbArray = this.state.historyGameBoard\n        } else {\n            hgbArray = this.state.historyGameBoard.slice(0).reverse()\n        } \n\n        return (\n            <div className=\"historyDiv\">\n            {   \n                hgbArray.map((value, index) => {\n                    let currentXTurn = value.xIsNext ? false : true\n\n                    if (!ascHistory) {\n                        index = hgbArray.length - 1 - index\n                    }\n                    \n                    if (index == 0) {\n                        return (<Button key=\"start\" className={(index == activeStep) ? \"historyBtn historyBtnActive\" : \"historyBtn\"} onClick={() => this.handleJumpToOldGameBoard(index)} >Game started</Button>);\n                    } else {\n                        return (<Button key={index} className={(index == activeStep) ? \"historyBtn historyBtnActive\" : \"historyBtn\"} onClick={() => this.handleJumpToOldGameBoard(index)} >Step: {index} | Turn: {currentXTurn ? \"X\" : \"O\"} | Col: {value.colNo} | Row: {value.rowNo}</Button>);\n                    }\n                })\n            }\n            </div>  \n        );\n    }\n\n    render() {\n        let sortBtnName = this.state.ascHistoryGameBoard ? \"SORT DESCENDING\" : \"SORT ASCENDING\"\n        let importantData = this.state.historyGameBoard[this.state.currentActiveHistoryStep]\n        let gameBoard = this.copyTwoDimensionArray(importantData.oldGameBoard)\n\n        return (\n            <Container fluid=\"true\">\n                {this.renderForm()}\n                <div className=\"gameBox\">\n                    <div className=\"status\">\n                        {importantData.gameMessage}\n                    </div>\n                    <Row>\n                        <Col>{this.renderBoard(gameBoard)}</Col>\n                        <Col>\n                            <Button className=\"historyBtn sortHistory\" onClick={() => this.handleSortHistory()}>{sortBtnName}</Button>\n                            {this.renderHistoryMove()}\n                        </Col>\n                    </Row>\n                </div>\n            </Container>\n        );\n    }\n}\n\n// ------------------------------------------------------\n// Export\n// ------------------------------------------------------\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}